#!/bin/bash

#   TODO
#
#   * Extract functions for readability
#
#   * Better preconditions. need to validate
#     1. Existance of Pivotal and GitHub environment variables
#     2. Format of branch name
#
#   * Better error handling for failed pulled requests. Should 
#     probably parse the JSON error response and translate into
#     a user-friendly message.
#
#   * Maybe look at making the '-f' option on the push command 
#     optional

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
git push -f origin $CURRENT_BRANCH

STORY_ID=$(echo $CURRENT_BRANCH | cut -d "/" -f 2)
# story_json = RestClient.get(
#     "https://www.pivotaltracker.com/services/v5/stories/#{story_id}", 
#     'X-TrackerToken' => ENV['PIVOTAL_TOKEN'])
# story = JSON(story_json)

# tracking_branch = `git branch -vv | grep "*"`
#     .match(/^.*\[([\w\.-]+)[:\]].*/)
#     .captures[0]

# repo = `git remote -v | grep push`
#     .split(/\s/)[1]
#     .match(/^.*:(.*)\.git$/)
#     .captures[0]

# pr_url="https://api.github.com/repos/#{repo}/pulls"
# payload = { 'title' => "[##{story_id}] #{story['name']}",
#             'body' => story['description'],
#             'head' => "the-container-store:#{current_branch}",
#             'base' => "the-container-store:#{tracking_branch}"}.to_json

# github_token = ENV['GITHUB_TOKEN']
# puts pr_url
# puts payload
# puts github_token
# begin
#   pull_request_json = RestClient.post pr_url, payload, 'Authorization' => "token #{github_token}"
#   pull_request = JSON(pull_request_json)
#   `open #{pull_request['html_url']}` # this will only work on Mac for now

#   `git checkout #{current_branch}`
# rescue Exception => e
#     puts e.response
# end
