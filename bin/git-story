#!/bin/bash

# For now, we are going to assume that the arguments will be
# in the form:
#
# git-story -t [type] -s [story-id] [branch-desc]
#
# We can handle more sophisticated argument parsing later

STORY_TYPE=$2
STORY_ID=$4
BRANCH_DESC=$5

git checkout -t -b $STORY_TYPE/$STORY_ID/$BRANCH_DESC

open https://www.pivotaltracker.com/story/show/$STORY_ID

# def main
#   options = parse_options ARGV, options
#   branch_desc = ARGV[0]

#   if options[:story].nil?
#     project_id = determine_project_id options
#     story = create_pivotal_story project_id, options[:type], branch_desc
#     options[:story] = story['id']
#   end

#   create_feature_branch options[:type], options[:story], branch_desc
#   open_story_in_browser options[:story]
# end

# def parse_options(args, options)
#   parser = OptionParser.new do |opts|
#     options = {}

#     opts.on("-s", "--story STORY_ID", "The Pivotal story to associate with the branch") do | story |
#       options[:story] = story
#     end

#     opts.on("-t", "--type STORY_TYPE", [:bug, :chore, :feature], 
#             "The type of Pivotal story to create") do | type |
#       options[:type] = type
#     end

#     opts.on("-p", "--project PROJECT_ID", "The Pivotal project to associate with the branch") do | project |
#       options[:project] = project
#     end
#   end

#   parser.parse!(args)
#   options
# end

# def determine_project_id(options)
#   if options[:project].nil?
#     git_root = `git rev-parse --show-toplevel`.chomp
#     return File.read("#{git_root}/.pivotal").chomp
#   end
#   options[:project]
# end

# def create_pivotal_story(project_id, type, name)
#   begin
#     story_json = RestClient.post(
#       "https://www.pivotaltracker.com/services/v5/projects/#{project_id}/stories",
#       { 'story_type' => type, 'name' => name }.to_json,
#       { 'X-TrackerToken' => ENV['PIVOTAL_TOKEN'], 'Content-Type' => 'application/json' })
#     JSON(story_json)
#   rescue => e
#     puts "Failed to create Pivotal story:"
#     puts e.response
#     exit
#   end
# end

# main
