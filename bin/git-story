#!/usr/bin/env ruby

#   TODO
#
#   * Support a more dynamic approach to Pivotal project ID, right 
#     now the project ID is hard code to be Store Sytems

require 'json'
require 'optparse'
require 'rest-client'

def main
  options = parse_options ARGV, options
  branch_desc = ARGV[0]

  if options[:story].nil?
    story = create_pivotal_story options[:type], branch_desc
    options[:story] = story['id']
  end

  create_feature_branch options[:type], options[:story], branch_desc
  open_story_in_browser options[:story]
end

def parse_options(args, options)
  parser = OptionParser.new do |opts|
    options = {}

    opts.on("-s", "--story STORY_ID", "The Pivotal story to associate with the branch") do | story |
      options[:story] = story
    end

    opts.on("-t", "--type STORY_TYPE", [:bug, :chore, :feature], 
            "The type of Pivotal story to create") do | type |
      options[:type] = type
    end
  end

  parser.parse!(args)
  options
end

def create_pivotal_story(type, name)
  begin
  	# TODO - figure out a way to not hard code project ID
    story_json = RestClient.post(
      "https://www.pivotaltracker.com/services/v5/projects/46184/stories",
      { 'story_type' => type, 'name' => name }.to_json,
      { 'X-TrackerToken' => ENV['PIVOTAL_TOKEN'], 'Content-Type' => 'application/json' })
    JSON(story_json)
  rescue => e
    puts "Failed to create Pivotal story:"
    puts e.response
    exit
  end
end

def create_feature_branch(type, story_id, desc)
  `git checkout -t -b #{type}/#{story_id}/#{desc}`
end

def open_story_in_browser(story_id)
  `open https://www.pivotaltracker.com/story/show/#{story_id}`
end

main
