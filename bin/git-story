#!/bin/bash

while getopts ":s:t:p:" opt; do
  case $opt in
    s)
      STORY_ID=$OPTARG
      ;;
    t)
      STORY_TYPE=$OPTARG
      ;;
    p)
      PROJECT_ID=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

shift $(( OPTIND - 1 ))
BRANCH_DESC=$1

git checkout -t -b $STORY_TYPE/$STORY_ID/$BRANCH_DESC

open https://www.pivotaltracker.com/story/show/$STORY_ID

# def main
#   options = parse_options ARGV, options
#   branch_desc = ARGV[0]

#   if options[:story].nil?
#     project_id = determine_project_id options
#     story = create_pivotal_story project_id, options[:type], branch_desc
#     options[:story] = story['id']
#   end

#   create_feature_branch options[:type], options[:story], branch_desc
#   open_story_in_browser options[:story]
# end

# def determine_project_id(options)
#   if options[:project].nil?
#     git_root = `git rev-parse --show-toplevel`.chomp
#     return File.read("#{git_root}/.pivotal").chomp
#   end
#   options[:project]
# end

# def create_pivotal_story(project_id, type, name)
#   begin
#     story_json = RestClient.post(
#       "https://www.pivotaltracker.com/services/v5/projects/#{project_id}/stories",
#       { 'story_type' => type, 'name' => name }.to_json,
#       { 'X-TrackerToken' => ENV['PIVOTAL_TOKEN'], 'Content-Type' => 'application/json' })
#     JSON(story_json)
#   rescue => e
#     puts "Failed to create Pivotal story:"
#     puts e.response
#     exit
#   end
# end

# main
